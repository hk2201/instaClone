generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String?
  username     String
  lastname     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  memberships  Membership[]  // Relation to groups through memberships
  ownedGroups  Group[]       // Groups created by this user
  image        String?       // Added image field for user profile image

  @@map("users")
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String?
  image       String?      // Added image field for group
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation(fields: [creatorId], references: [id])
  memberships Membership[] // All members of this group
  posts       Post[]       // Added posts relation

  @@map("groups")
}

model Membership {
  id       String   @id @default(uuid())
  email    String
  groupId  String
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  user     User     @relation(fields: [email], references: [email], onDelete: Cascade) // âœ… Corrected to reference User.email
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([email, groupId]) // A user can only be a member of a group once
  @@map("memberships")
}


model Post {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("posts")
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}